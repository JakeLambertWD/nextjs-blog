{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter'; // point the directory to the file\n\nconst postsDirectory = path.join(process.cwd(), 'posts'); // posts/getting-started-with-nextjs.md\n// read all the posts from the posts folder synchronously\n\nexport function getPostsFiles() {\n  return fs.readdirSync(postsDirectory);\n} // get data from the post file\n\nexport const getPostData = postIdentifier => {\n  // removes file extension\n  const postSlug = postIdentifier.replace(/\\.md$/, ''); // path to the file\n\n  const filePath = path.join(postsDirectory, `${postSlug}.md`); // read the content of the file\n\n  const fileContent = fs.readFileSync(filePath, 'utf-8'); // return a object with 2 properties (meta data & JS object/markdown string)\n\n  const {\n    data,\n    content\n  } = matter(fileContent); // what we return from this function\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n};\nexport const getAllPosts = () => {\n  // read post files\n  const postFiles = getPostsFiles(); // get meta data & contents from the post files\n\n  const allPosts = postFiles.map(postFile => {\n    return getPostData(postFile);\n  }); // sort posts in order of most recent\n\n  const sortedPosts = allPosts.sort((postA, postB) => postA.date > postB.date ? -1 : 1);\n  return sortedPosts;\n};\nexport const getFeaturedPosts = () => {\n  // get all posts\n  const allPosts = getAllPosts(); // filter featured posts\n\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n};\nexport default getAllPosts;","map":null,"metadata":{},"sourceType":"module"}