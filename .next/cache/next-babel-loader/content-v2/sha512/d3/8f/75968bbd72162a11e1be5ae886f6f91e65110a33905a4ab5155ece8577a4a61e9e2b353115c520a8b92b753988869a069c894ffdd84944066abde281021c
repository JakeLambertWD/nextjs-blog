{"ast":null,"code":"import _defineProperty from \"/Users/jakelambert/Downloads/nextjs-full-blog/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter'; // point the directory to the file\n\nvar postsDirectory = path.join(process.cwd(), 'posts'); // posts/getting-started-with-nextjs.md\n// get data from the post file\n\nvar getPostData = function getPostData(fileName) {\n  // path to the file\n  var filePath = path.join(postsDirectory, fileName); // read the content of the file\n\n  var fileContent = fs.readFileSync(filePath, 'utf-8'); // return a object with 2 properties (meta data & JS object/markdown string)\n\n  var _matter = matter(fileContent),\n      data = _matter.data,\n      content = _matter.content; // removes file extension\n\n\n  var postSlug = fileName.replace(/\\.md$/, ''); // what we return from this function\n\n  var postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content: content\n  });\n\n  return postData;\n};\n\nexport var getAllPosts = function getAllPosts() {\n  // read all the posts from the posts folder synchronously\n  var postFiles = fs.readdirSync(postsDirectory); // get meta data & contents from the post files\n\n  var allPosts = postFiles.map(function (postFile) {\n    return getPostData(postFile);\n  }); // sort posts in order of most recent\n\n  var sortedPosts = allPosts.sort(function (postA, postB) {\n    return postA.date > postB.date ? -1 : 1;\n  });\n  return sortedPosts;\n};\nexport var getFeaturedPosts = function getFeaturedPosts() {\n  // get all posts\n  var allPosts = getAllPosts(); // filter featured posts\n\n  var featuredPosts = allPosts.filter(function (post) {\n    return post.isFeatured;\n  });\n  return featuredPosts;\n};\nexport default getAllPosts;","map":{"version":3,"sources":["/Users/jakelambert/Downloads/nextjs-full-blog/helpers/posts-util.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getPostData","fileName","filePath","fileContent","readFileSync","data","content","postSlug","replace","postData","slug","getAllPosts","postFiles","readdirSync","allPosts","map","postFile","sortedPosts","sort","postA","postB","date","getFeaturedPosts","featuredPosts","filter","post","isFeatured"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AACA,IAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB,C,CAA0D;AAE1D;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC/B;AACA,MAAMC,QAAQ,GAAGR,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BK,QAA1B,CAAjB,CAF+B,CAI/B;;AACA,MAAME,WAAW,GAAGV,EAAE,CAACW,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB,CAL+B,CAO/B;;AAP+B,gBAQLP,MAAM,CAACQ,WAAD,CARD;AAAA,MAQvBE,IARuB,WAQvBA,IARuB;AAAA,MAQjBC,OARiB,WAQjBA,OARiB,EAU/B;;;AACA,MAAMC,QAAQ,GAAGN,QAAQ,CAACO,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAjB,CAX+B,CAa/B;;AACA,MAAMC,QAAQ;AACbC,IAAAA,IAAI,EAAEH;AADO,KAEVF,IAFU;AAGbC,IAAAA,OAAO,EAAPA;AAHa,IAAd;;AAMA,SAAOG,QAAP;AACA,CArBD;;AAuBA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAM;AAChC;AACA,MAAMC,SAAS,GAAGnB,EAAE,CAACoB,WAAH,CAAejB,cAAf,CAAlB,CAFgC,CAIhC;;AACA,MAAMkB,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC1C,WAAOhB,WAAW,CAACgB,QAAD,CAAlB;AACA,GAFgB,CAAjB,CALgC,CAShC;;AACA,MAAMC,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAc,UAACC,KAAD,EAAQC,KAAR;AAAA,WAAmBD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CAAlD;AAAA,GAAd,CAApB;AACA,SAAOJ,WAAP;AACA,CAZM;AAcP,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACrC;AACA,MAAMR,QAAQ,GAAGH,WAAW,EAA5B,CAFqC,CAIrC;;AACA,MAAMY,aAAa,GAAGT,QAAQ,CAACU,MAAT,CAAgB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,UAAT;AAAA,GAApB,CAAtB;AACA,SAAOH,aAAP;AACA,CAPM;AASP,eAAeZ,WAAf","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\n\n// point the directory to the file\nconst postsDirectory = path.join(process.cwd(), 'posts'); // posts/getting-started-with-nextjs.md\n\n// get data from the post file\nconst getPostData = fileName => {\n\t// path to the file\n\tconst filePath = path.join(postsDirectory, fileName);\n\n\t// read the content of the file\n\tconst fileContent = fs.readFileSync(filePath, 'utf-8');\n\n\t// return a object with 2 properties (meta data & JS object/markdown string)\n\tconst { data, content } = matter(fileContent);\n\n\t// removes file extension\n\tconst postSlug = fileName.replace(/\\.md$/, '');\n\n\t// what we return from this function\n\tconst postData = {\n\t\tslug: postSlug,\n\t\t...data,\n\t\tcontent\n\t};\n\n\treturn postData;\n};\n\nexport const getAllPosts = () => {\n\t// read all the posts from the posts folder synchronously\n\tconst postFiles = fs.readdirSync(postsDirectory);\n\n\t// get meta data & contents from the post files\n\tconst allPosts = postFiles.map(postFile => {\n\t\treturn getPostData(postFile);\n\t});\n\n\t// sort posts in order of most recent\n\tconst sortedPosts = allPosts.sort((postA, postB) => (postA.date > postB.date ? -1 : 1));\n\treturn sortedPosts;\n};\n\nexport const getFeaturedPosts = () => {\n\t// get all posts\n\tconst allPosts = getAllPosts();\n\n\t// filter featured posts\n\tconst featuredPosts = allPosts.filter(post => post.isFeatured);\n\treturn featuredPosts;\n};\n\nexport default getAllPosts;\n"]},"metadata":{},"sourceType":"module"}