{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jakelambert/Downloads/nextjs-full-blog/components/posts/post-detail/post-content.js\";\nimport ReactMarkdown from 'react-markdown';\nimport PostHeader from './post-header';\nimport classes from './post-content.module.css';\nimport Image from 'next/image';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nconst PostContent = props => {\n  const {\n    post\n  } = props;\n  const imagePath = `/images/posts/${post.slug}/${post.image}`; // custom renderers for Markdown\n\n  const customRenderers = {\n    // NOT WORKING\n    paragraph(paragraph) {\n      const {\n        node\n      } = paragraph; // takes a HTML img element and converts to a Next Image\n\n      if (node.children[0].type === 'image') {\n        const image = node.children[0];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.image,\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: `/images/posts/${post.slug}/${image.url}`,\n            alt: image.alt,\n            width: 600,\n            height: 300\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 7\n          }, this), \";\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 6\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: paragraph.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this);\n    },\n\n    // NOT WORKING\n    code(code) {\n      const {\n        language,\n        value\n      } = code;\n      return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        style: atomDark,\n        language: language,\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this);\n    }\n\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: classes.content,\n    children: [/*#__PURE__*/_jsxDEV(PostHeader, {\n      title: post.title,\n      image: imagePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      renderers: customRenderers,\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n};\n\nexport default PostContent;","map":{"version":3,"sources":["/Users/jakelambert/Downloads/nextjs-full-blog/components/posts/post-detail/post-content.js"],"names":["ReactMarkdown","PostHeader","classes","Image","Prism","SyntaxHighlighter","atomDark","PostContent","props","post","imagePath","slug","image","customRenderers","paragraph","node","children","type","url","alt","code","language","value","content","title"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,SAASC,KAAK,IAAIC,iBAAlB,QAA2C,0BAA3C;AACA,SAASC,QAAT,QAAyB,gDAAzB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AAEA,QAAME,SAAS,GAAI,iBAAgBD,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,KAAM,EAA3D,CAH4B,CAK5B;;AACA,QAAMC,eAAe,GAAG;AACvB;AAEAC,IAAAA,SAAS,CAACA,SAAD,EAAY;AACpB,YAAM;AAAEC,QAAAA;AAAF,UAAWD,SAAjB,CADoB,CAGpB;;AACA,UAAIC,IAAI,CAACC,QAAL,CAAc,CAAd,EAAiBC,IAAjB,KAA0B,OAA9B,EAAuC;AACtC,cAAML,KAAK,GAAGG,IAAI,CAACC,QAAL,CAAc,CAAd,CAAd;AAEA,4BACC;AAAK,UAAA,SAAS,EAAEd,OAAO,CAACU,KAAxB;AAAA,kCACC,QAAC,KAAD;AAAO,YAAA,GAAG,EAAG,iBAAgBH,IAAI,CAACE,IAAK,IAAGC,KAAK,CAACM,GAAI,EAApD;AAAuD,YAAA,GAAG,EAAEN,KAAK,CAACO,GAAlE;AAAuE,YAAA,KAAK,EAAE,GAA9E;AAAmF,YAAA,MAAM,EAAE;AAA3F;AAAA;AAAA;AAAA;AAAA,kBADD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AAKA;;AAED,0BAAO;AAAA,kBAAIL,SAAS,CAACE;AAAd;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KAlBsB;;AAoBvB;AACAI,IAAAA,IAAI,CAACA,IAAD,EAAO;AACV,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAsBF,IAA5B;AAEA,0BAAO,QAAC,iBAAD;AAAmB,QAAA,KAAK,EAAEd,QAA1B;AAAoC,QAAA,QAAQ,EAAEe,QAA9C;AAAwD,QAAA,QAAQ,EAAEC;AAAlE;AAAA;AAAA;AAAA;AAAA,cAAP;AACA;;AAzBsB,GAAxB;AA4BA,sBACC;AAAS,IAAA,SAAS,EAAEpB,OAAO,CAACqB,OAA5B;AAAA,4BACC,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEd,IAAI,CAACe,KAAxB;AAA+B,MAAA,KAAK,EAAEd;AAAtC;AAAA;AAAA;AAAA;AAAA,YADD,eAIC,QAAC,aAAD;AAAe,MAAA,SAAS,EAAEG,eAA1B;AAAA,gBAA4CJ,IAAI,CAACc;AAAjD;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAQA,CA1CD;;AA4CA,eAAehB,WAAf","sourcesContent":["import ReactMarkdown from 'react-markdown';\nimport PostHeader from './post-header';\nimport classes from './post-content.module.css';\nimport Image from 'next/image';\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nconst PostContent = props => {\n\tconst { post } = props;\n\n\tconst imagePath = `/images/posts/${post.slug}/${post.image}`;\n\n\t// custom renderers for Markdown\n\tconst customRenderers = {\n\t\t// NOT WORKING\n\n\t\tparagraph(paragraph) {\n\t\t\tconst { node } = paragraph;\n\n\t\t\t// takes a HTML img element and converts to a Next Image\n\t\t\tif (node.children[0].type === 'image') {\n\t\t\t\tconst image = node.children[0];\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className={classes.image}>\n\t\t\t\t\t\t<Image src={`/images/posts/${post.slug}/${image.url}`} alt={image.alt} width={600} height={300} />;\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn <p>{paragraph.children}</p>;\n\t\t},\n\n\t\t// NOT WORKING\n\t\tcode(code) {\n\t\t\tconst { language, value } = code;\n\n\t\t\treturn <SyntaxHighlighter style={atomDark} language={language} children={value} />;\n\t\t}\n\t};\n\n\treturn (\n\t\t<article className={classes.content}>\n\t\t\t<PostHeader title={post.title} image={imagePath} />\n\t\t\t{/* markdown to JSX translation */}\n\t\t\t{/* to overwrite how certain elements are rendered, we use the renderers prop */}\n\t\t\t<ReactMarkdown renderers={customRenderers}>{post.content}</ReactMarkdown>\n\t\t</article>\n\t);\n};\n\nexport default PostContent;\n"]},"metadata":{},"sourceType":"module"}