{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter'; // point the directory to the file\n\nconst postsDirectory = path.join(process.cwd(), 'posts'); // posts/getting-started-with-nextjs.md\n// read all the posts from the posts folder synchronously\n\nexport function getPostsFiles() {\n  return fs.readdirSync(postsDirectory);\n} // get data from the post file\n\nconst getPostData = postIdentifier => {\n  // removes file extension\n  const postSlug = postIdentifier.replace(/\\.md$/, ''); // path to the file\n\n  const filePath = path.join(postsDirectory, `${postSlug}.md`); // read the content of the file\n\n  const fileContent = fs.readFileSync(filePath, 'utf-8'); // return a object with 2 properties (meta data & JS object/markdown string)\n\n  const {\n    data,\n    content\n  } = matter(fileContent); // what we return from this function\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n};\n\nexport const getAllPosts = () => {\n  // read all the posts from the posts folder synchronously\n  const postFiles = fs.readdirSync(postsDirectory); // get meta data & contents from the post files\n\n  const allPosts = postFiles.map(postFile => {\n    return getPostData(postFile);\n  }); // sort posts in order of most recent\n\n  const sortedPosts = allPosts.sort((postA, postB) => postA.date > postB.date ? -1 : 1);\n  return sortedPosts;\n};\nexport const getFeaturedPosts = () => {\n  // get all posts\n  const allPosts = getAllPosts(); // filter featured posts\n\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n};\nexport default getAllPosts;","map":{"version":3,"sources":["/Users/jakelambert/Downloads/nextjs-full-blog/helpers/posts-util.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getPostsFiles","readdirSync","getPostData","postIdentifier","postSlug","replace","filePath","fileContent","readFileSync","data","content","postData","slug","getAllPosts","postFiles","allPosts","map","postFile","sortedPosts","sort","postA","postB","date","getFeaturedPosts","featuredPosts","filter","post","isFeatured"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AACA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB,C,CAA0D;AAE1D;;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC/B,SAAOP,EAAE,CAACQ,WAAH,CAAeL,cAAf,CAAP;AACA,C,CAED;;AACA,MAAMM,WAAW,GAAGC,cAAc,IAAI;AACrC;AACA,QAAMC,QAAQ,GAAGD,cAAc,CAACE,OAAf,CAAuB,OAAvB,EAAgC,EAAhC,CAAjB,CAFqC,CAIrC;;AACA,QAAMC,QAAQ,GAAGZ,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA2B,GAAEQ,QAAS,KAAtC,CAAjB,CALqC,CAOrC;;AACA,QAAMG,WAAW,GAAGd,EAAE,CAACe,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB,CARqC,CAUrC;;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBf,MAAM,CAACY,WAAD,CAAhC,CAXqC,CAarC;;AACA,QAAMI,QAAQ;AACbC,IAAAA,IAAI,EAAER;AADO,KAEVK,IAFU;AAGbC,IAAAA;AAHa,IAAd;;AAMA,SAAOC,QAAP;AACA,CArBD;;AAuBA,OAAO,MAAME,WAAW,GAAG,MAAM;AAChC;AACA,QAAMC,SAAS,GAAGrB,EAAE,CAACQ,WAAH,CAAeL,cAAf,CAAlB,CAFgC,CAIhC;;AACA,QAAMmB,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AAC1C,WAAOf,WAAW,CAACe,QAAD,CAAlB;AACA,GAFgB,CAAjB,CALgC,CAShC;;AACA,QAAMC,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CAAhE,CAApB;AACA,SAAOJ,WAAP;AACA,CAZM;AAcP,OAAO,MAAMK,gBAAgB,GAAG,MAAM;AACrC;AACA,QAAMR,QAAQ,GAAGF,WAAW,EAA5B,CAFqC,CAIrC;;AACA,QAAMW,aAAa,GAAGT,QAAQ,CAACU,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,UAA7B,CAAtB;AACA,SAAOH,aAAP;AACA,CAPM;AASP,eAAeX,WAAf","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\n\n// point the directory to the file\nconst postsDirectory = path.join(process.cwd(), 'posts'); // posts/getting-started-with-nextjs.md\n\n// read all the posts from the posts folder synchronously\n\nexport function getPostsFiles() {\n\treturn fs.readdirSync(postsDirectory);\n}\n\n// get data from the post file\nconst getPostData = postIdentifier => {\n\t// removes file extension\n\tconst postSlug = postIdentifier.replace(/\\.md$/, '');\n\n\t// path to the file\n\tconst filePath = path.join(postsDirectory, `${postSlug}.md`);\n\n\t// read the content of the file\n\tconst fileContent = fs.readFileSync(filePath, 'utf-8');\n\n\t// return a object with 2 properties (meta data & JS object/markdown string)\n\tconst { data, content } = matter(fileContent);\n\n\t// what we return from this function\n\tconst postData = {\n\t\tslug: postSlug,\n\t\t...data,\n\t\tcontent\n\t};\n\n\treturn postData;\n};\n\nexport const getAllPosts = () => {\n\t// read all the posts from the posts folder synchronously\n\tconst postFiles = fs.readdirSync(postsDirectory);\n\n\t// get meta data & contents from the post files\n\tconst allPosts = postFiles.map(postFile => {\n\t\treturn getPostData(postFile);\n\t});\n\n\t// sort posts in order of most recent\n\tconst sortedPosts = allPosts.sort((postA, postB) => (postA.date > postB.date ? -1 : 1));\n\treturn sortedPosts;\n};\n\nexport const getFeaturedPosts = () => {\n\t// get all posts\n\tconst allPosts = getAllPosts();\n\n\t// filter featured posts\n\tconst featuredPosts = allPosts.filter(post => post.isFeatured);\n\treturn featuredPosts;\n};\n\nexport default getAllPosts;\n"]},"metadata":{},"sourceType":"module"}